


ARM Macro Assembler    Page 1 


    1 00000000         ;/** main.c
    2 00000000         ;* Runs on TM4C123
    3 00000000         ;* Lab 1 program for EE445M RTOS
    4 00000000         ;* 2/03/2019
    5 00000000         ;* Sikender Ashraf and Sijin Woo
    6 00000000         ;*/
    7 00000000         
    8 00000000         
    9 00000000         ;/******************************************************
                       ***********************/
   10 00000000         ; OSasm.s: low-level OS commands, written in assembly   
                                           */
   11 00000000         ; Runs on LM4F120/TM4C123
   12 00000000         ; A very simple real time operating system with minimal 
                       features.
   13 00000000         ; Daniel Valvano
   14 00000000         ; January 29, 2015
   15 00000000         ;
   16 00000000         ; This example accompanies the book
   17 00000000         ;  "Embedded Systems: Real Time Interfacing to ARM Corte
                       x M Microcontrollers",
   18 00000000         ;  ISBN: 978-1463590154, Jonathan Valvano, copyright (c)
                        2015
   19 00000000         ;
   20 00000000         ;  Programs 4.4 through 4.12, section 4.2
   21 00000000         ;
   22 00000000         ;Copyright 2015 by Jonathan W. Valvano, valvano@mail.ute
                       xas.edu
   23 00000000         ;    You may use, edit, run or distribute this file
   24 00000000         ;    as long as the above copyright notice remains
   25 00000000         ; THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHE
                       THER EXPRESS, IMPLIED
   26 00000000         ; OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED W
                       ARRANTIES OF
   27 00000000         ; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE A
                       PPLY TO THIS SOFTWARE.
   28 00000000         ; VALVANO SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR
                        SPECIAL, INCIDENTAL,
   29 00000000         ; OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
   30 00000000         ; For more information about my classes, my research, an
                       d my books, see
   31 00000000         ; http://users.ece.utexas.edu/~valvano/
   32 00000000         ; */
   33 00000000         
   34 00000000         
   35 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   36 00000000                 THUMB
   37 00000000                 REQUIRE8
   38 00000000                 PRESERVE8
   39 00000000         
   40 00000000                 EXTERN           RunPt       ; currently running
                                                             thread
   41 00000000                 EXTERN           EndPt       ; last TCB pointer 
                                                            
   42 00000000                 EXTERN           NextRunPt   ; point to next thr
                                                            ead to run
   43 00000000                 EXPORT           OS_DisableInterrupts
   44 00000000                 EXPORT           OS_EnableInterrupts



ARM Macro Assembler    Page 2 


   45 00000000         ;  EXPORT OS_Signal
   46 00000000         ;  EXPORT OS_Wait
   47 00000000                 EXPORT           StartOS
   48 00000000                 EXPORT           PendSV_Handler
   49 00000000         
   50 00000000         
   51 00000000         ;/** OS_DisableInterrupts
   52 00000000         ;* This function will disable interrupts for RTOS
   53 00000000         ;* @author Sikender & Sijin
   54 00000000         ;* @date 2/04/2019
   55 00000000         ;*/
   56 00000000         OS_DisableInterrupts
   57 00000000 B672            CPSID            I
   58 00000002 4770            BX               LR
   59 00000004         
   60 00000004         
   61 00000004         ;/** OS_EnableInterrupts
   62 00000004         ;* This function will enable interrupts of RTOS
   63 00000004         ;* @author Sikender & Sijin
   64 00000004         ;* @date 2/04/2019
   65 00000004         ;*/
   66 00000004         OS_EnableInterrupts
   67 00000004 B662            CPSIE            I
   68 00000006 4770            BX               LR
   69 00000008         
   70 00000008         
   71 00000008         
   72 00000008         ;;/** OS_Signal
   73 00000008         ;;* This function(Spinlock) will signal that a mutual ex
                       clusion is taking place in a function
   74 00000008         ;;* @author Sikender & Sijin
   75 00000008         ;;* @date 2/04/2019
   76 00000008         ;;* @counter counter
   77 00000008         ;;*/
   78 00000008         ;OS_Signal
   79 00000008         ;LDREX R1, [R0]  ; R1 = Counter
   80 00000008         ;ADD  R1, #1   ; R1++
   81 00000008         ;STREX R2, R1, [R0] ; Counter = R1, R2 is 0 if successfu
                       ll
   82 00000008         ;CMP  R2, #0   ; if (R2 != 0) OS_Signal();
   83 00000008         ;BNE  OS_Signal  ; SUCCESS?
   84 00000008         ;BX   LR    ; return
   85 00000008         
   86 00000008         
   87 00000008         
   88 00000008         ;;/** OS_Wait
   89 00000008         ;;* This function(Spinlock) will remove signal for mutua
                       l exclusion in function
   90 00000008         ;;* @author Sikender & Sijin
   91 00000008         ;;* @date 2/04/2019
   92 00000008         ;;* @counter counter
   93 00000008         ;;*/
   94 00000008         ;OS_Wait
   95 00000008         ;LDREX R1, [R0]  ; R1 = Counter
   96 00000008         ;SUBS R1, #1   ; R1--
   97 00000008         ;ITT  PL    ; If Then, ok if counter>=0
   98 00000008         ;STREXPL R2, R1, [R0] ; Counter = R1, R2 is 0 if success
                       full
   99 00000008         ;CMPPL R2, #0   ; SUCCESS?



ARM Macro Assembler    Page 3 


  100 00000008         ;BNE  OS_Wait   ; busy wait
  101 00000008         ;BX  LR    ; return
  102 00000008         
  103 00000008         
  104 00000008         
  105 00000008         
  106 00000008         
  107 00000008         
  108 00000008         
  109 00000008         ;/** PendSV_Handler
  110 00000008         ;* This function will handle context switches for TCB
  111 00000008         ;* @author Sikender & Sijin
  112 00000008         ;* @date 2/04/2019
  113 00000008         ;*/
  114 00000008        0 
                       regRunPtr
                               RN               0
  115 00000008        1 
                       regRunCur
                               RN               1
  116 00000008        1 
                       regRunNxt
                               RN               1
  117 00000008         PendSV_Handler
  118 00000008 B672            CPSID            I           ; Make Critical, Us
                                                            e STartcritical?
  119 0000000A E92D 0FF0       PUSH             {R4-R11}    ; Save regs R4-R11,
                                                             ISR takes care of 
                                                            R0-R3, SP, LR, PC, 
                                                            PSR
  120 0000000E 480E            LDR              R0, =RunPt  ; R0 is ptr to old 
                                                            thread RunPt
  121 00000010 6801            LDR              R1, [R0]    ; RunPt->stackPoint
                                                            er = SP
  122 00000012 F8C1 D000       STR              SP, [R1]    ; save SP t
  123 00000016         
  124 00000016 490D            LDR              R1, =NextRunPt ; Load address o
                                                            f NextRunPtr
  125 00000018 6809            LDR              R1, [R1]    ; R1 =NextRunPt
  126 0000001A         ;LDR     R1, [R1,#4]  ; R1 =RunPt-> nextPtr
  127 0000001A 6001            STR              R1, [R0]    ; RunPt set to R1, 
                                                            RunPt = R1
  128 0000001C         
  129 0000001C F8D1 D000       LDR              SP, [R1]    ; SP =RunPt-> sp
  130 00000020 E8BD 0FF0       POP              {R4-R11}    ; restore regs R4-R
                                                            11 
  131 00000024 B662            CPSIE            I           ; End Critical, Use
                                                             EndCritical()?
  132 00000026 4770            BX               LR          ; The End
  133 00000028         
  134 00000028         
  135 00000028         
  136 00000028         ;/** StartOS
  137 00000028         ;* This function will start running of OS threads
  138 00000028         ;* @author Sikender & Sijin
  139 00000028         ;* @date 2/04/2019
  140 00000028         ;*/
  141 00000028        2 
                       regRun  RN               2



ARM Macro Assembler    Page 4 


  142 00000028         StartOS
  143 00000028 4807            LDR              R0, =RunPt  ; R0 is address of 
                                                            RunPt, R0 = &RunPt
  144 0000002A 6802            LDR              R2, [R0]    ; R2 =RunPt
  145 0000002C F8D2 D000       LDR              SP, [R2]    ; SP =RunPt->stackP
                                                            ointer;
  146 00000030 E8BD 0FF0       POP              {R4-R11}    ; Restore register,
                                                             match stack define
                                                            d in main
  147 00000034 BC0F            POP              {R0-R3}
  148 00000036 F85D CB04       POP              {R12}
  149 0000003A         ; ignore LR and PSR from initialized stack
  150 0000003A B001            ADD              SP, SP, #4
  151 0000003C F85D EB04       POP              {LR}
  152 00000040 B001            ADD              SP, SP, #4
  153 00000042 B662            CPSIE            I
  154 00000044 4770            BX               LR          ; The END
  155 00000046         
  156 00000046         
  157 00000046         
  158 00000046         
  159 00000046         ;***************End File********************************
                       **********
  160 00000046 00 00           ALIGN
  161 00000048                 END
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\object
s\osasm.d -o.\objects\osasm.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Includ
e -IC:\Keil\ARM\Inc\TI\TM4C123 --predefine="__MICROLIB SETA 1" --list=.\listing
s\osasm.lst Src\OSasm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 35 in file Src\OSasm.s
   Uses
      None
Comment: .text unused
OS_DisableInterrupts 00000000

Symbol: OS_DisableInterrupts
   Definitions
      At line 56 in file Src\OSasm.s
   Uses
      At line 43 in file Src\OSasm.s
Comment: OS_DisableInterrupts used once
OS_EnableInterrupts 00000004

Symbol: OS_EnableInterrupts
   Definitions
      At line 66 in file Src\OSasm.s
   Uses
      At line 44 in file Src\OSasm.s
Comment: OS_EnableInterrupts used once
PendSV_Handler 00000008

Symbol: PendSV_Handler
   Definitions
      At line 117 in file Src\OSasm.s
   Uses
      At line 48 in file Src\OSasm.s
Comment: PendSV_Handler used once
StartOS 00000028

Symbol: StartOS
   Definitions
      At line 142 in file Src\OSasm.s
   Uses
      At line 47 in file Src\OSasm.s
Comment: StartOS used once
5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

EndPt 00000000

Symbol: EndPt
   Definitions
      At line 41 in file Src\OSasm.s
   Uses
      None
Comment: EndPt unused
NextRunPt 00000000

Symbol: NextRunPt
   Definitions
      At line 42 in file Src\OSasm.s
   Uses
      At line 124 in file Src\OSasm.s
Comment: NextRunPt used once
RunPt 00000000

Symbol: RunPt
   Definitions
      At line 40 in file Src\OSasm.s
   Uses
      At line 120 in file Src\OSasm.s
      At line 143 in file Src\OSasm.s

3 symbols
345 symbols in table
